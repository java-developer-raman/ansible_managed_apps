---

- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Update the apt package index
  apt:
    update_cache: yes
  become: yes

- name: Add an apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  become: yes

- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: /etc/apt/sources.list.d/kubernetes.list
  become: yes

- name: Install Kubernetes binaries
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
      - kubelet
      - kubeadm
      - kubectl
  become: yes

# We will look for a file, this file will exist only after successful setup of a cluster
- name: Check if kubernetes cluster is already setup
  stat:
    path: /var/lib/kubelet/config.yaml
  register: stat_result

# This step will initialize kubelet configuration
- name: Initialize the Kubernetes cluster using kubeadm
  command: kubeadm init --apiserver-advertise-address="{{node_ip}}" --apiserver-cert-extra-sans="{{node_ip}}"  --node-name kube-master --pod-network-cidr=192.170.0.0/16
  # If this command does not work, then remove it and uncomment above command. This is just an experiment to enable preset.
  # command: kubeadm init --runtime-config=settings.k8s.io/v1alpha1=true --enable-admission-plugins=NodeRestriction,PodPreset --apiserver-advertise-address="{{node_ip}}" --apiserver-cert-extra-sans="{{node_ip}}"  --node-name kube-master --pod-network-cidr=10.244.0.0/16
  become: yes
  when: stat_result.stat.exists == False

# this step is necessary for virtual boxes created via vagrant
- name: Copy kubelet file
  template: src=kubelet.tmpl dest="/etc/default/kubelet"
  become: yes
  when: stat_result.stat.exists == False

- name: Restart kubelet
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted
  become: yes
  when: stat_result.stat.exists == False

- name: Setup kubeconfig fuer normales User
  command: "{{ item }}"
  with_items:
    - mkdir -p /home/{{user_name}}/.kube
    - cp -i /etc/kubernetes/admin.conf /home/{{user_name}}/.kube/config
    - chown {{user_name}}:{{group_name}} /home/{{user_name}}/.kube/config
  become: yes
  when: stat_result.stat.exists == False

- name: Copy Calico yaml file
  copy: src=calico-v3.8.yaml dest="/home/{{user_name}}/programs/servers/calico-v3.8.yaml" mode=0755

- name: Install calico pod network
  command: kubectl apply -f "/home/{{user_name}}/programs/servers/calico-v3.8.yaml"
  when: stat_result.stat.exists == False

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command
  when: stat_result.stat.exists == False

- name: Copy join command to local file
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="/tmp/join-command"
  notify: Check docker status
  when: stat_result.stat.exists == False

- name: Copy Config server deployment file
  template: src=config-server/config-server-deployment.yml dest="{{apps_directory}}/config-server/config-server-deployment.yml"

- name: Copy config-server-deployment-with-preset.yml
  template: src=config-server/config-server-deployment-with-preset.yml dest="{{apps_directory}}/config-server/config-server-deployment-with-preset.ymll"

- name: Copy pvc-logs file
  template: src=pvc-logs.yml dest="{{apps_directory}}/pvc-logs.yml"

- name: Copy pod-preset.yml
  template: src=pod-preset.yml dest="{{apps_directory}}/pod-preset.yml"

- name: Copy filebeat-daemonset
  template: src=filebeat-daemonset.yml dest="{{apps_directory}}/filebeat-daemonset.yml"

- name: Copy MySQL DB service file
  template: src=mysql-db-service.yml dest="{{apps_directory}}/mysql-db-service.yml"

- name: Copy Vault service file
  template: src=vault-service.yml dest="{{apps_directory}}/vault-service.yml"

- name: Copy ingress file
  template: src=ingress.yml dest="{{apps_directory}}/ingress.yml"

- name: Copy einwohner-deployment
  template: src=einwohner/einwohner-deployment.yml dest="{{apps_directory}}/einwohner/einwohner-deployment.yml"
